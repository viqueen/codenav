#!/usr/bin/env node

const program = require('commander');
const CodeNavConfig = require('../lib/codenav/codenav-config');
const CodeNavStore = require('../lib/codenav/codenav-store');
const RestClient = require('../lib/util/rest-client');
const UrlParser = require('../lib/util/url-parser');
const StashRegisterCmd = require('../lib/cmd/stash-register-cmd');

const codeNavConfig = new CodeNavConfig();
const codeNavStore = new CodeNavStore(codeNavConfig);

program.command('register <urlConnection>')
    .description('registers a new repo using its url connection')
    .option('-s, --scope <scope>', 'explicitly set the scope', codeNavConfig.get('cnav.scope'))
    .action((urlConnection, options) => {
        codeNavStore.register({
            urlConnection: urlConnection,
            scope: options.scope
        });
    });

program.command('list')
    .description('lists registered repos')
    .option('-h, --host <host>', 'filter by host', '<all>')
    .option('-ns, --namespace <namespace>', 'filter by namespace', '<all>')
    .option('-s, --scope <scope>', 'filter by scope', '<all>')
    .option('-l, --location', 'display checkout location only', false)
    .option('-r, --repo <repo>', 'filter by repo', '<all>')
    .action((options) => {
        // noinspection JSUnresolvedVariable
        codeNavStore.list(
            {
                host: options.host,
                namespace: options.namespace,
                scope: options.scope,
                alias: options.repo
            },
            {
                location: options.location
            }
        );
    });

program.command('remove')
    .description('remove registered repos')
    .option('-h, --host <host>', 'filter by host', '<all>')
    .option('-ns, --namespace <namespace>', 'filter by namespace', '<all>')
    .option('-s, --scope <scope>', 'filter by scope', '<all>')
    .option('-r, --repo <repo>', 'filter by repo', '<all>')
    .action((options) => {
        // noinspection JSUnresolvedVariable
        codeNavStore.remove({
            host: options.host,
            namespace: options.namespace,
            scope: options.scope,
            alias: options.repo
        });
    });

program.command('clone')
    .description('clone registered repos')
    .option('-h, --host <host>', 'filter by host', '<all>')
    .option('-ns, --namespace <namespace>', 'filter by namespace', '<all>')
    .option('-s, --scope <scope>', 'filter by scope', '<all>')
    .action((options) => {
        codeNavStore.clone({
            host: options.host,
            namespace: options.namespace,
            scope: options.scope
        });
    });

// configuration handlers

program.command('config')
    .description('displays cnav configuration')
    .action(() => {
        console.log(codeNavConfig.config());
    });

program.command('set-config <key> <value>')
    .description('updates cnav configuration entry')
    .action((key, value) => {
        codeNavConfig.set(key, value);
    });

program.command('get-config <key>')
    .description('gets cnav configuration entry')
    .action((key) => {
        console.log(codeNavConfig.get(key));
    });

// git providers

program.command('github <namespace>')
    .description('register repos from github with given namespace')
    .option('-p, --protocol <protocol>', 'url connection protocol', 'ssh')
    .option('-s, --scope <scope>', 'select scope', codeNavConfig.get('cnav.scope'))
    .action((namespace, options) => {
        const githubClient = new RestClient({
            host: 'api.github.com'
        });
        const urlKey = options.protocol !== 'ssh' ? 'clone_url' : 'ssh_url';
        // TODO : handle pagination
        githubClient.get(`/users/${namespace}/repos`)
            .then(json => {
                json.forEach(item => codeNavStore.register({
                    urlConnection: item[urlKey],
                    scope: options.scope
                }));
            })
            .catch(error => console.log);
    });

program.command('bitbucket <namespace>')
    .description('register repos from bitbucket with given namespace')
    .option('-p, --protocol <protocol>', 'url connection protocol', 'ssh')
    .option('-s, --scope <scope>', 'select scope', codeNavConfig.get('cnav.scope'))
    .action((namespace, options) => {
        const bitbucketClient = new RestClient({
            host: 'api.bitbucket.org'
        });
        // TODO : handle pagination
        bitbucketClient.get(`/2.0/repositories/${namespace}`)
            .then(json => {
                json.values
                    .flatMap(item => item.links.clone)
                    .filter(item => item.name === options.protocol)
                    .forEach(item => codeNavStore.register({
                        urlConnection: item.href,
                        scope: options.scope
                    }));
            })
            .catch(error => console.log);
    });

program.command('stash <project>')
    .description('register repos from bitbucket dc for a given project')
    .option('-i, --instance <instance>', 'select instance name', 'stash')
    .option('-p, --protocol <protocol>', 'url connection protocol', 'ssh')
    .option('-s, --scope <scope>', 'select scope', codeNavConfig.get('cnav.scope'))
    .action((project, options) => {
        const url = codeNavConfig.get(`${options.instance}.url`);
        const token = codeNavConfig.get(`${options.instance}.token`);

        if (!url || !token) {
            console.log(`please set ${options.instance}.url and ${options.instance}.token properties`);
            console.log(`
            cnav set-config ${options.instance}.url <value>
            cnav set-config ${options.instance}.token <value>
            `);
            return;
        }

        const urlParts = UrlParser.parse(url);
        if (!urlParts) {
            console.log('invalid stash url ' + url);
            return;
        }

        const stashRegisterCmd = new StashRegisterCmd({
            urlParts: urlParts,
            token: token,
            project: project,
            codeNavStore: codeNavStore,
            protocol: options.protocol,
            scope: options.scope
        });
        stashRegisterCmd.execute();
    });

program.version('1.0.0');
program.parse(process.argv);