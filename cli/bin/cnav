#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const CodeNavConfig = require('../lib/codenav/codenav-config');
const CodeNavStore = require('../lib/codenav/codenav-store');
const RestClient = require('../lib/util/rest-client');
const UrlParser = require('../lib/util/url-parser');
const StashRegisterCmd = require('../lib/cmd/stash-register-cmd');
const ExecCmd = require('../lib/cmd/exec-cmd');
const CodeNavRepo = require('../lib/codenav/codenav-repo');

const codeNavConfig = new CodeNavConfig();
const codeNavStore = new CodeNavStore(codeNavConfig);
const codeNavRepo = new CodeNavRepo(codeNavConfig);

program.command('register <urlConnection> [aliases...]')
    .description('registers a new repo using its url connection')
    .option('-s, --scope <scope>', 'explicitly set the scope', codeNavConfig.get('cnav.scope'))
    .action((urlConnection, aliases, options) => {
        codeNavStore.register({
            urlConnection: urlConnection,
            scope: options.scope,
            aliases: aliases
        });
    });

program.command('list')
    .description('lists registered repos')
    .option('-h, --host <host>', 'filter by host', '<all>')
    .option('-ns, --namespace <namespace>', 'filter by namespace', '<all>')
    .option('-s, --scope <scope>', 'filter by scope', codeNavConfig.get('cnav.scope'))
    .option('-l, --location', 'display checkout location only', false)
    .option('-r, --repo <repo>', 'filter by repo', '<all>')
    .option('-f, --filter <keyword>', 'filter by keyword', '<all>')
    .action((options) => {
        // noinspection JSUnresolvedVariable
        codeNavStore.list(
            {
                host: options.host,
                namespace: options.namespace,
                scope: options.scope,
                aliases: options.repo,
                filter: options.filter
            },
            {
                location: options.location
            }
        );
    });

program.command('remove')
    .description('remove registered repos')
    .option('-h, --host <host>', 'filter by host', '<all>')
    .option('-ns, --namespace <namespace>', 'filter by namespace', '<all>')
    .option('-s, --scope <scope>', 'filter by scope', '<all>')
    .option('-r, --repo <repo>', 'filter by repo', '<all>')
    .action((options) => {
        // noinspection JSUnresolvedVariable
        codeNavStore.remove({
            host: options.host,
            namespace: options.namespace,
            scope: options.scope,
            aliases: options.repo
        });
    });

program.command('clone')
    .description('clone registered repos')
    .option('-h, --host <host>', 'filter by host', '<all>')
    .option('-ns, --namespace <namespace>', 'filter by namespace', '<all>')
    .option('-s, --scope <scope>', 'filter by scope', '<all>')
    .action((options) => {
        codeNavStore.clone({
            host: options.host,
            namespace: options.namespace,
            scope: options.scope
        });
    });

// configuration handlers

program.command('config')
    .description('displays cnav configuration')
    .action(() => {
        console.log(codeNavConfig.config());
    });

program.command('set-config <key> <value>')
    .description('updates cnav configuration entry')
    .action((key, value) => {
        codeNavConfig.set(key, value);
    });

program.command('get-config <key>')
    .description('gets cnav configuration entry')
    .action((key) => {
        console.log(codeNavConfig.get(key));
    });

program.version('1.0.0');
program.parse(process.argv);